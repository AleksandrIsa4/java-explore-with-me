{
  "info": {
    "_postman_id": "19aaf650-f77a-49f0-9269-2675b33b37a6",
    "name": "Test Like",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Добавление оценки событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "\r",
              "        const user1 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid1\", user1.id)\r",
              "        const user2 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid2\", user2.id)\r",
              "        const user3 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid3\", user3.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        const request2 = await api.publishParticipationRequest(event.id, user2.id);\r",
              "        const request3 = await api.publishParticipationRequest(event.id, user3.id);\r",
              "        await api.acceptParticipationRequest(event.id, user2.id, request2.id);\r",
              "        await api.acceptParticipationRequest(event.id, user3.id, request3.id);\r",
              "        const request = await api.publishParticipationRequest(event.id, user.id);\r",
              "        await api.acceptParticipationRequest(event.id, user.id, request.id);\r",
              "        const url2=\"http://localhost:8080/users/\"+user2.id+\"/events/\"+event.id+\"/rating?like=LIKE\";\r",
              "        const url3=\"http://localhost:8080/users/\"+user3.id+\"/events/\"+event.id+\"/rating?like=DISLIKE\";\r",
              "        pm.sendRequest({\r",
              "            url : url2,\r",
              "            method : \"POST\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.sendRequest({\r",
              "                url : url3,\r",
              "                method : \"POST\",\r",
              "                header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                pm.collectionVariables.set('source3', response.json());\r",
              "            });\r",
              "        });\r",
              "\r",
              "\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ от добавления лайка должен содержать код статуса 200\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get(\"source3\");\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Рейтинг после 3 оценок должен быть равен 1\", function () {\r",
              "    pm.expect(target.rating).equal(1, 'Рейтинг после 3 оценок должен быть равен 1.');\r",
              "});\r",
              "\r",
              "pm.test(\"Рейтинг после 3 оценок должен быть равен 0\", function () {\r",
              "    pm.expect(source.rating).equal(0, 'Рейтинг после 3 оценок должен быть равен 0.');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/rating?like=LIKE",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "rating"
          ],
          "query": [
            {
              "key": "like",
              "value": "LIKE"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение не имеющейся оценки пользователя",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "\r",
              "        const user1 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid1\", user1.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        const request = await api.publishParticipationRequest(event.id, user.id);\r",
              "        await api.acceptParticipationRequest(event.id, user.id, request.id);\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/rating?like=LIKE",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "rating"
          ],
          "query": [
            {
              "key": "like",
              "value": "LIKE"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение оценки событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "\r",
              "        const user1 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid1\", user1.id)\r",
              "        const user2 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid2\", user2.id)\r",
              "        const user3 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid3\", user3.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        const request3 = await api.publishParticipationRequest(event.id, user3.id);\r",
              "        await api.acceptParticipationRequest(event.id, user3.id, request3.id);\r",
              "        const request = await api.publishParticipationRequest(event.id, user.id);\r",
              "        await api.acceptParticipationRequest(event.id, user.id, request.id);\r",
              "        const url2=\"http://localhost:8080/users/\"+user.id+\"/events/\"+event.id+\"/rating?like=LIKE\";\r",
              "        const url3=\"http://localhost:8080/users/\"+user3.id+\"/events/\"+event.id+\"/rating?like=DISLIKE\";\r",
              "        pm.sendRequest({\r",
              "            url : url2,\r",
              "            method : \"POST\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.sendRequest({\r",
              "                url : url3,\r",
              "                method : \"POST\",\r",
              "                header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                pm.collectionVariables.set('source3', response.json());\r",
              "            });\r",
              "        });\r",
              "\r",
              "\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ от добавления лайка должен содержать код статуса 200\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "});\r",
              "\r",
              "//const source = pm.collectionVariables.get(\"source3\");\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Рейтинг после изменения оценки должен быть равен -2\", function () {\r",
              "    pm.expect(target.rating).equal(-2, 'Рейтинг после изменения оценки должен быть равен -2.');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/rating?like=DISLIKE",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "rating"
          ],
          "query": [
            {
              "key": "like",
              "value": "DISLIKE"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление оценки",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "\r",
              "        const user1 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid1\", user1.id)\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        const request = await api.publishParticipationRequest(event.id, user.id);\r",
              "        await api.acceptParticipationRequest(event.id, user.id, request.id);\r",
              "        const url=\"http://localhost:8080/users/\"+user.id+\"/events/\"+event.id+\"/rating?like=LIKE\";\r",
              "        pm.sendRequest({\r",
              "            url : url,\r",
              "            method : \"POST\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.collectionVariables.set('source', response.json());\r",
              "        });\r",
              "\r",
              "\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ от добавления лайка должен содержать код статуса 200\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get(\"source\");\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Рейтинг после удаления оценки должен исчезнать\", function () {\r",
              "    pm.expect(source.rating).equal(1, 'Рейтинг до удаления оценки должен равняться 1.');\r",
              "    pm.expect(target.rating).equal(0, 'Рейтинг после удаления оценки должен уменьшиться.');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/rating?like=LIKE",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "rating"
          ],
          "query": [
            {
              "key": "like",
              "value": "LIKE"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение подробной информации об опубликованном событии по его идентификатору",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "        pm.collectionVariables.set('response', event);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get('response');\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать полу rating\", function () {\r",
              "pm.expect(target).to.have.property('rating');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/events/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "{{eid}}",
              "description": "(Required) id события"
            }
          ]
        },
        "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
      },
      "response": []
    },
    {
      "name": "Получение событий с возможностью фильтрации по RATING",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "\r",
              "        const user10 = await api.addUser(rnd.getUser());\r",
              "        let event10 = await api.addEvent(user10.id, rnd.getEvent(category.id));\r",
              "        event10 = await api.publishEvent(event10.id);\r",
              "\r",
              "\r",
              "        const user2 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid2\", user2.id)\r",
              "        const user3 = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid3\", user3.id)\r",
              "        const request2 = await api.publishParticipationRequest(event.id, user2.id);\r",
              "        const request3 = await api.publishParticipationRequest(event10.id, user3.id);\r",
              "        await api.acceptParticipationRequest(event.id, user2.id, request2.id);\r",
              "        await api.acceptParticipationRequest(event10.id, user3.id, request3.id);\r",
              "        const url2=\"http://localhost:8080/users/\"+user2.id+\"/events/\"+event.id+\"/rating?like=LIKE\";\r",
              "        const url3=\"http://localhost:8080/users/\"+user3.id+\"/events/\"+event10.id+\"/rating?like=DISLIKE\";\r",
              "        pm.sendRequest({\r",
              "            url : url2,\r",
              "            method : \"POST\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.sendRequest({\r",
              "                url : url3,\r",
              "                method : \"POST\",\r",
              "                header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                \r",
              "            });\r",
              "        });\r",
              "\r",
              "\r",
              "\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "const target1 = pm.response.json()[0];\r",
              "const target2 = pm.response.json()[target.length-1];\r",
              "\r",
              "pm.test(\"События должны содержать поле rating\", function () {\r",
              "pm.expect(target1).to.have.property('rating');\r",
              "pm.expect(target2).to.have.property('rating');\r",
              "});\r",
              "\r",
              "pm.test(\"Первым идет событие с большим рейтингом\", function () {\r",
              "pm.expect(target1.rating).to.be.above(target2.rating, 'Первым идет событие с большим рейтингом');\r",
              "});\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/events?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=RATING&from=0&size=1000",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events"
          ],
          "query": [
            {
              "key": "text",
              "value": "0",
              "description": "текст для поиска в содержимом аннотации и подробном описании события",
              "disabled": true
            },
            {
              "key": "categories",
              "value": "0",
              "description": "список идентификаторов категорий в которых будет вестись поиск",
              "disabled": true
            },
            {
              "key": "paid",
              "value": "true",
              "description": "поиск только платных/бесплатных событий",
              "disabled": true
            },
            {
              "key": "rangeStart",
              "value": "2022-01-06%2013%3A30%3A38",
              "description": "дата и время не раньше которых должно произойти событие"
            },
            {
              "key": "rangeEnd",
              "value": "2097-09-06%2013%3A30%3A38",
              "description": "дата и время не позже которых должно произойти событие"
            },
            {
              "key": "onlyAvailable",
              "value": "false",
              "description": "только события у которых не исчерпан лимит запросов на участие"
            },
            {
              "key": "sort",
              "value": "RATING",
              "description": "Вариант сортировки: по дате события или по количеству просмотров"
            },
            {
              "key": "from",
              "value": "0",
              "description": "количество событий, которые нужно пропустить для формирования текущего набора"
            },
            {
              "key": "size",
              "value": "1000",
              "description": "количество событий в наборе"
            }
          ]
        },
        "description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "uid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "eid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "uid2",
      "value": ""
    },
    {
      "key": "uid3",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "source3",
      "value": ""
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    }
  ]
}